name: 构建

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - v*

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  builder_matrix:
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        os: [windows-latest]
        exclude: []

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.8.10'
          architecture: ${{ matrix.arch }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Init zip Folder
        run: mkdir zip

      - name: Init temp files
        run: |
          xcopy "utils\\bak\\default.py" "utils\\" /Y
          xcopy "utils\\bak\\login.py" "utils\\" /Y

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller Pillow

      - name: Build with PyInstaller
        run: |
          pyinstaller main.py -w `
          --icon               "img/favicon.ico" `
          -n                   "main" `
          --contents-directory "." `
          --add-data           "audio;audio" `
          --add-data           "img;img" `
          --add-data           "ui;ui" `
          --add-data           "utils;utils" `
          --add-data           "LICENSE;." `
          --add-data           "src;src" `
          --add-data           "version;." `
          --add-data           "main.py;." `
          --hidden-import      "PyQt6.QtWebEngine" `
          --exclude-module     "PyQt5" `
          --exclude-module     "PyQt6" `
          --distpath           "dist" `
          --workpath           "build" `
          --noconfirm

      - name: Package
        run: |
          choco install -y 7zip
          7z a -tzip "zip/ClassManager_latest_Windows-x64.zip" dist/* -r

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.4.2
        with:
          name: ClassManager_latest_Windows-x64
          path: ./zip

      - name: Check Commit Message
        id: check_commit
        run: |
          $commit_msg = git log -1 --pretty=%B
          if ($commit_msg -match '^chore: Release v\d+\.\d+\.\d+(\.[0-9]+)?$') {
            $version = $commit_msg -replace '^chore: Release (v\d+\.\d+\.\d+(\.[0-9]+)?)$', '$1'
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "should_release=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "should_release=false" >> $env:GITHUB_OUTPUT
          }

      - name: Create Release Tag
        if: steps.check_commit.outputs.should_release == 'true'
        run: |
          git tag ${{ steps.check_commit.outputs.version }}
          git push origin ${{ steps.check_commit.outputs.version }}

      - name: Release
        if: steps.check_commit.outputs.should_release == 'true'
        uses: ./.github/workflows/release.yml
        with:
          run_id: ${{ github.run_id }}